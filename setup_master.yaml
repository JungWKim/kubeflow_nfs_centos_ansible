---
- name: create a cluster on master node
  hosts: master
  become: yes
  gather_facts: yes

  tasks:
    - name: check the servers' os version
      when: >
        (ansible_distribution != 'CentOS')

        or

        (ansible_distribution_version != '7.9')
      meta: end_play

    - name: setup master node
      when:
        - admin is not defined
        - master_ip is not defined
      meta: end_play    

    - name: check if k8s log file exists
      become_user: "{{ admin }}"
      stat:
        path: $HOME/k8s_log.sh
      register: stat_result

    - name: create k8s log file
      become_user: "{{ admin }}"
      file:
        path: $HOME/k8s_log.sh
        state: touch
        mode: 0777
      when: not stat_result.stat.exists
      register: output

    - name: check if k8s join master script exists
      become_user: "{{ admin }}"
      stat:
        path: $HOME/k8s_join_master.sh
      register: stat_result

    - name: create k8s join master script
      become_user: "{{ admin }}"
      file:
        path: $HOME/k8s_join_master.sh
        state: touch
        mode: 0777
      when: not stat_result.stat.exists
      register: output

    - name: check if k8s join worker script exists
      become_user: "{{ admin }}"
      stat:
        path: $HOME/k8s_join_worker.sh
      register: stat_result

    - name: create k8s join worker script
      become_user: "{{ admin }}"
      file:
        path: $HOME/k8s_join_worker.sh
        state: touch
        mode: 0777
      when: not stat_result.stat.exists
      register: output

    - name: modprobe br_netfilter
      modprobe:
        name: br_netfilter
        state: present
      register: output

    - name: kubeadm init
      shell: |
        "kubeadm init --control-plane-endpoint {{ master_ip }}:6443 --upload-certs --pod-network-cidr \"10.244.0.0/16\" >> /home/{{ admin }}/k8s_log.sh"
      register: output

    - name: add join master command in its script (1)
      become_user: "{{ admin }}"
      shell: echo "#!/bin/bash" > $HOME/k8s_join_master.sh
      register: output

    - name: add join master command in its script (2)
      shell: sed -n '/kubeadm join/,/control/p' /home/{{ admin }}/k8s_log.sh | head -n 3 >> /home/{{ admin }}/k8s_join_master.sh
      register: output

    - name: add join worker command in its script (1)
      become_user: "{{ admin }}"
      shell: echo "#!/bin/bash" > $HOME/k8s_join_worker.sh
      register: output

    - name: add join worker command in its script (2)
      become_user: "{{ admin }}"
      shell: sed -n '/kubeadm join/,/control/p' $HOME/k8s_log.sh | tail -n 2 >> $HOME/k8s_join_worker.sh
      register: output

    - name: check if master root's $HOME/.kube exists
      stat:
        path: $HOME/.kube
      register: stat_result

    - name: create master root's $HOME/.kube directory
      file:
        path: $HOME/.kube
        state: directory
      when: not stat_result.stat.exists
      register: output

    - name: check if master admin's $HOME/.kube exists
      become_user: "{{ admin }}"
      stat:
        path: $HOME/.kube
      register: stat_result

    - name: create master admin's $HOME/.kube directory
      become_user: "{{ admin }}"
      file:
        path: $HOME/.kube
        state: directory
      when: not stat_result.stat.exists
      register: output

    - name: copy /etc/kubernetes/admin.conf as master root's $HOME/.kube/config and change owner
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        owner: root
        group: root
        remote_src: yes
      register: output

    - name: copy /etc/kubernetes/admin.conf as master admin's $HOME/.kube/config and change owner
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ admin }}/.kube/config"
        owner: "{{ admin }}"
        group: "{{ admin }}"
        remote_src: yes
      register: output

    - name: install flannel
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      register: output

    - name: export /usr/local/bin PATH in root's .bashrc
      lineinfile:
        path: $HOME/.bashrc
        line: export PATH=/usr/local/bin:${PATH}
      register: output

    - name: download helm installation script
      become_user: "{{ admin }}"
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        dest: $HOME/get_helm.sh
        mode: 0777
      register: output

    - name: install helm
      become_user: "{{ admin }}"
      shell: $HOME/get_helm.sh
      register: output

    - name: wait until flannel initialization finishes
      shell: sleep 60
      register: output

    - name: turn off cni0
      shell: ip link set cni0 down
      register: output

    - name: delete cni0
      shell: brctl delbr cni0
      register: output

    - name: save coredns pod as variable (1)
      shell: echo $(kubectl get pod -A | grep coredns | awk '{print $2}') | awk '{print $1}'
      register: coredns_pod1

    - name: save coredns pod as variable (2)
      shell: echo $(kubectl get pod -A | grep coredns | awk '{print $2}') | awk '{print $2}'
      register: coredns_pod2

    - name: delete existing coredns pod (1)
      shell: "kubectl delete pod -n kube-system {{ coredns_pod1.stdout }}"
      register: output

    - name: delete existing coredns pod (2)
      shell: "kubectl delete pod -n kube-system {{ coredns_pod2.stdout }}"
      register: output
