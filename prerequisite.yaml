---
- name: setup prerequisite jobs on every node
  hosts: nodes
  become: yes
  gather_facts: yes

  tasks:
    - debug: ip=ansible_default_ipv4.address
    - debug: hostname=ansible_hostname

    - name: check the servers' os version
      when: >
        (ansible_distribution != 'CentOS')

        or

        (ansible_distribution_version != '7.9')
      meta: end_play

    - name: setup master node
      when:
        - admin is not defined
      meta: end_play

    - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
      shell: swapoff -a
      register: output

    - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
      register: output

# reference : https://germaniumhq.com/2019/02/14/2019-02-14-Disabling-Swap-for-Kubernetes-in-an-Ansible-Playbook/

    - name: upgrade all packages
      yum:
        name: '*'
        state: latest
      register: output

    - name: install basic packages
      apt:
        pkg:
          - net-tools
          - nfs-utils
          - tmux
          - createrepo
          - wget
          - pciutils
        state: present
      register: output

    - name: disable firewalld
      firewalld:
        state: disabled
      register: output

    - name: stop firewalld
      service:
        name: firewalld
        state: stopped
        enabled: false
      register: output

    - name: turn off selinux
      shell: setenforce 0
      register: output

    - name: Set SELinux in permissive mode (effectively disabling it)
      shell: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
      register: output

    - name: check if /etc/modules-load.d/k8s.conf exists
      stat:
        path: /etc/modules-load.d/k8s.conf
      register: stat_result

    - name: create /etc/modules-load.d/k8s.conf
      file:
        path: /etc/modules-load.d/k8s.conf
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: letting iptables see bridged traffic (1)
      blockinfile:
        path: /etc/modules-load.d/k8s.conf
        block: |
          overlay
          br_netfilter
      register: output

    - name: check if /etc/sysctl.d/k8s.conf exists
      stat:
        path: /etc/sysctl.d/k8s.conf
      register: stat_result

    - name: create /etc/sysctl.d/k8s.conf
      file:
        path: /etc/sysctl.d/k8s.conf
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: letting iptables see bridged traffic (2)
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
      register: output

    - name: reload system kernel params
      command: sysctl --system
      register: output

    - name: add its domain name in /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: {{ ip }}	{{ hostname }}
      register: output

    - name: install crio

    - name: download k8s apt-key.gpg
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg
        mode: 0644
      register: output

    - name: check if /etc/apt/sources.list.d/kubernetes.list exists
      stat:
        path: /etc/apt/sources.list.d/kubernetes.list
      register: stat_result

    - name: create /etc/apt/sources.list.d/kubernetes.list
      file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: add k8s package repository
      blockinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        block: |
          deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
      register: output

    - name: install kubelet / kubeadm / kubectl
      apt:
        pkg:
          - kubelet=1.20.11-00
          - kubeadm=1.20.11-00
          - kubectl=1.20.11-00
        state: present
        update_cache: yes
      register: output

    - name: apt-mark hold kubeadm
      dpkg_selections:
        name: kubeadm
        selection: hold
      register: output

    - name: apt-mark hold kubelet
      dpkg_selections:
        name: kubelet
        selection: hold
      register: output

    - name: apt-mark hold kubectl
      dpkg_selections:
        name: kubectl
        selection: hold
      register: output

    - name: enable kubectl auto completion for root
      blockinfile:
        path: $HOME/.bashrc
        block: |
          source <(kubectl completion bash)
          source <(kubeadm completion bash)
      register: output

    - name: enable kubectl auto completion for admin
      become_user: "{{ admin }}"
      blockinfile:
        path: $HOME/.bashrc
        block: |
          source <(kubectl completion bash)
          source <(kubeadm completion bash)
      register: output
