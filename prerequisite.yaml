---
- name: setup prerequisite jobs on every node
  hosts: nodes
  become: yes
  gather_facts: yes

  tasks:
    - name: check the servers' os version
      when: >
        (ansible_distribution != 'CentOS')

        or

        (ansible_distribution_version != '7.9')
      meta: end_play

    - name: setup master node
      when:
        - admin is not defined
      meta: end_play

    - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
      shell: swapoff -a
      register: output

    - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
      register: output

# reference : https://germaniumhq.com/2019/02/14/2019-02-14-Disabling-Swap-for-Kubernetes-in-an-Ansible-Playbook/

#    - name: upgrade all packages
#      yum:
#        name: '*'
#        state: latest
#      register: output

    - name: install basic packages
      yum:
        name:
          - net-tools
          - nfs-utils
          - tmux
          - createrepo
          - wget
          - pciutils
        state: present
      register: output

    - name: disable firewalld
      firewalld:
        state: disabled
      register: output

    - name: stop firewalld
      service:
        name: firewalld
        state: stopped
        enabled: false
      register: output

    - name: turn off selinux
      shell: setenforce 0
      register: output

    - name: Set SELinux in permissive mode (effectively disabling it)
      replace:
        regexp: 'SELINUX=enforcing'
        replace: 'SELINUX=permissive'
        path: /etc/selinux/config
      register: output

    - name: check if /etc/modules-load.d/k8s.conf exists
      stat:
        path: /etc/modules-load.d/k8s.conf
      register: stat_result

    - name: create /etc/modules-load.d/k8s.conf
      file:
        path: /etc/modules-load.d/k8s.conf
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: letting iptables see bridged traffic (1)
      blockinfile:
        path: /etc/modules-load.d/k8s.conf
        block: |
          overlay
          br_netfilter
      register: output

    - name: check if /etc/sysctl.d/k8s.conf exists
      stat:
        path: /etc/sysctl.d/k8s.conf
      register: stat_result

    - name: create /etc/sysctl.d/k8s.conf
      file:
        path: /etc/sysctl.d/k8s.conf
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: letting iptables see bridged traffic (2)
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
      register: output

    - name: reload system kernel params
      shell: sysctl --system
      register: output

    - name: modprobe br_netfilter
      modprobe:
        name: br_netfilter
        state: present
      register: output

    - name: add its domain name in /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ ansible_default_ipv4.address }}	{{ ansible_hostname }}"
      register: output

    - name: install docker (1)
      yum:
        name: yum-utils
        state: present
      register: output

    - name: install docker (2)
      shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      register: output

    - name: install docker (3)
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
      register: output

    - name: start docker
      shell: systemctl start docker
      register: output

    - name: enable docker
      shell: systemctl enable docker
      register: output

    - name: copy daemon.json in /etc/docker
      copy:
        src: files/daemon.json
        dest: /etc/docker
        mode: 0777
      register: output

    - name: check if /etc/systemd/system/docker/service.d exists
      stat:
        path: /etc/systemd/system/docker/service.d
      register: stat_result

    - name: create /etc/systemd/system/docker/service.d
      file:
        path: /etc/systemd/system/docker/service.d
        state: directory
      when: not stat_result.stat.exists
      register: output

    - name: daemon reload
      shell: systemctl daemon-reload
      register: output

    - name: restart docker
      shell: systemctl restart docker
      register: output

    - name: copy cri-dockerd installation script
      become_user: "{{ admin }}"
      copy:
        src: files/install_cri_dockerd.sh
        dest: $HOME
        mode: 0777
      register: output

    - name: execute install_cri_dockerd.sh
      shell: "/home/{{ admin }}/install_cri_dockerd.sh"
      register: output

    - name: check if /etc/yum.repos.d/kubernetes.repo exists
      stat:
        path: /etc/yum.repos.d/kubernetes.repo 
      register: stat_result

    - name: create /etc/yum.repos.d/kubernetes.repo exists
      file:
        path: /etc/yum.repos.d/kubernetes.repo 
        state: touch
      when: not stat_result.stat.exists
      register: output

    - name: add k8s package repository
      blockinfile:
        path: /etc/yum.repos.d/kubernetes.repo 
        block: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      register: output

    - name: install kubelet / kubeadm / kubectl
      yum:
        name:
          - kubelet-1.22.12
          - kubeadm-1.22.12
          - kubectl-1.22.12
        state: present
        #update_cache: true
      register: output
   
    - name: enable kubelet
      shell: systemctl enable --now kubelet
      register: output
      
    - name: start kubelet
      shell: systemctl start kubelet
      register: output

    - name: enable kubectl auto completion for root
      blockinfile:
        path: $HOME/.bashrc
        block: |
          source <(kubectl completion bash)
          source <(kubeadm completion bash)
      register: output

    - name: enable kubectl auto completion for admin
      become_user: "{{ admin }}"
      blockinfile:
        path: $HOME/.bashrc
        block: |
          source <(kubectl completion bash)
          source <(kubeadm completion bash)
      register: output
